name: MacOS Packaged.

on:
  workflow_dispatch:
  push:
    branches: ['**']
    tags: ['**']
  pull_request:
    branches: ['**']

jobs:
  macos:
    name: MacOS2
    runs-on: macos-13

    strategy:
      matrix:
        defines: [ "" ]

    env:
      GIT: "https://github.com"
      # обязательно ffmpeg@6
      CMAKE_PREFIX_PATH: "/opt/homebrew/opt/ffmpeg@6:/opt/homebrew/opt/openal-soft"
      PKG_CONFIG_PATH: "/opt/homebrew/opt/ffmpeg@6/lib/pkgconfig"
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      MANUAL_CACHING: "1"
      AUTO_CACHING: "1"

    steps:
      - name: Get repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      # Закрепляем SDK 14 (Xcode 15.2)
      - name: Select Xcode 15.2 (macOS 14 SDK)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.2'

      - name: First set up
        run: |
          brew update
          brew upgrade || true
          # используем строго ffmpeg@6
          brew unlink ffmpeg || true
          brew install ada-url autoconf automake boost cmake ffmpeg@6 jpeg-xl libavif libheif libtool openal-soft openh264 openssl opus ninja pkg-config python qt yasm xz
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

          # SDK 14 в окружение для всех cmake
          echo "CMAKE_OSX_SYSROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "CMAKE_OSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV

          xcodebuild -version > CACHE_KEY.txt
          brew list --versions >> CACHE_KEY.txt
          echo $MANUAL_CACHING >> CACHE_KEY.txt
          echo "$GITHUB_WORKSPACE" >> CACHE_KEY.txt
          if [ "$AUTO_CACHING" = "1" ]; then
            thisFile=$REPO_NAME/.github/workflows/mac_packaged.yml
            md5 -q "$thisFile" >> CACHE_KEY.txt || true
          fi
          echo "CACHE_KEY=$(md5 -q CACHE_KEY.txt || echo manual-cache)" >> $GITHUB_ENV

          echo "LibrariesPath=$(pwd)" >> $GITHUB_ENV
          echo "/opt/homebrew/opt/qt/bin" >> $GITHUB_PATH

          curl -o tg_owt-version.json https://api.github.com/repos/desktop-app/tg_owt/git/refs/heads/master || true

      - name: RNNoise
        run: |
          cd "$LibrariesPath"
          git clone --depth=1 https://gitlab.xiph.org/xiph/rnnoise.git
          cd rnnoise
          ./autogen.sh
          ./configure --disable-examples --disable-doc
          make -j"$(sysctl -n hw.logicalcpu)"
          sudo make install

      - name: WebRTC cache
        id: cache-webrtc
        uses: actions/cache@v4
        with:
          path: ${{ env.LibrariesPath }}/tg_owt
          # включаем маркер версии abseil в ключ кэша
          key: ${{ runner.OS }}-webrtc-${{ env.CACHE_KEY }}-absl-20240116_2-${{ hashFiles('**/tg_owt-version.json') }}

      - name: Build WebRTC (tg_owt)
        if: steps.cache-webrtc.outputs.cache-hit != 'true'
        run: |
          cd "$LibrariesPath"
          git clone --depth=1 --recursive --shallow-submodules "$GIT/desktop-app/tg_owt.git"
          cd tg_owt
          git submodule update --init --recursive --force

          # Пин Abseil на LTS с absl::Nonnull
          cd src/third_party/abseil-cpp
          git fetch --tags
          git checkout 20240116.2
          cd ../../..

          # Приоритет include сабмодуля abseil выше системных
          ABSL_SUBMODULE="$PWD/src/third_party/abseil-cpp"
          export CPATH="$ABSL_SUBMODULE:$CPATH"

          cmake -B build -GNinja . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET} \
            -DCMAKE_CXX_FLAGS="-I$ABSL_SUBMODULE"

          cmake --build build --parallel

      - name: TDE2E cache
        id: cache-tde2e
        uses: actions/cache@v4
        with:
          path: ${{ env.LibrariesPath }}/tde2e
          key: ${{ runner.OS }}-tde2e-${{ env.CACHE_KEY }}

      - name: Build TDE2E
        if: steps.cache-tde2e.outputs.cache-hit != 'true'
        run: |
          cd "$LibrariesPath"
          git init tde2e
          cd tde2e
          git remote add origin "$GIT/tdlib/td.git"
          git fetch --depth=1 origin 51743dfd01dff6179e2d8f7095729caa4e2222e9
          git reset --hard FETCH_HEAD
          cmake -B build -GNinja . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$PWD/build/prefix" \
            -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET} \
            -DTD_E2E_ONLY=ON
          cmake --build build --parallel
          cmake --install build

      - name: Build Telegram Desktop
        if: env.ONLY_CACHE == 'false'
        env:
          tg_owt_DIR: ${{ env.LibrariesPath }}/tg_owt/build
          tde2e_DIR: ${{ env.LibrariesPath }}/tde2e/build/prefix
        run: |
          cd "$REPO_NAME"

          # Тот же abseil для приоритета include
          ABSL_SUBMODULE="$LibrariesPath/tg_owt/src/third_party/abseil-cpp"
          export CPATH="$ABSL_SUBMODULE:$CPATH"

          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo "ARTIFACT_NAME=Telegram_${{ matrix.defines }}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=Telegram" >> $GITHUB_ENV
          fi

          # Обходим захват jpeglib.h из Mono: игнорируем путь Mono и явно указываем JPEG из Homebrew
          export CMAKE_IGNORE_PATH="/Library/Frameworks/Mono.framework/Headers"
          export JPEG_INCLUDE_DIR="/opt/homebrew/include"
          export JPEG_LIBRARY="/opt/homebrew/lib/libjpeg.dylib"

          cmake -B build -GNinja . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET} \
            -DTDESKTOP_API_TEST=ON \
            -DCMAKE_CXX_FLAGS="-I$ABSL_SUBMODULE" \
            -DJPEG_INCLUDE_DIR="$JPEG_INCLUDE_DIR" \
            -DJPEG_LIBRARY="$JPEG_LIBRARY" \
            $DEFINE
          cmake --build build --parallel

          cd build
          /opt/homebrew/opt/qt/bin/macdeployqt Telegram.app -verbose=3 -always-overwrite

          # ad-hoc подпись (НЕ удаляем подпись)
          codesign -s - --force --deep -v Telegram.app

          mkdir -p dmgsrc
          mv Telegram.app dmgsrc
          hdiutil create -volname Telegram -srcfolder dmgsrc -ov -format UDZO Telegram.dmg

      - name: Upload artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME || 'Telegram' }}
          path: ${{ env.REPO_NAME }}/build/Telegram.dmg
